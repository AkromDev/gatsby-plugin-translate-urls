{"version":3,"sources":["webpack:///./src/pages/posts.js","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/blog-list-item.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/listing.tsx"],"names":["pageContext","data","locale","allPost","nodes","length","posts","showTags","query","ItemTags","tags","useMinimalBlogConfig","tagsPath","basePath","Fragment","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","BlogListItem","post","mb","sx","fontSize","color","title","mt","a","date","Listing","className"],"mappings":"2FAAA,8FAKe,sBAA0B,IAAxBA,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,KAC5B,OACE,kBAAC,IAAD,KACE,uCAAaD,EAAYE,QACxBD,EAAKE,QAAQC,MAAMC,OAAS,EAC3B,kBAAC,IAAD,CAASC,MAAOL,EAAKE,QAAQC,MAAOG,UAAU,IAE9C,eAAiBP,EAAYE,SAM9B,IAAMM,EAAK,c,qHCYHC,IAjBE,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,KAAsB,EACTC,cAAvBC,EADgC,EAChCA,SAAUC,EADsB,EACtBA,SAElB,OACE,kBAAC,IAAMC,SAAP,KACGJ,EAAKK,KAAI,SAACC,EAAKC,GAAN,OACR,kBAAC,IAAMH,SAAP,CAAgBI,IAAKF,EAAIG,QACpBF,GAAF,KACD,kBAAC,IAAD,CAAOG,GAAIC,OAAMC,GAAIC,YAAe,IAAIV,EAAL,IAAiBD,EAAjB,IAA6BI,EAAIG,OACjEH,EAAIQ,a,6GCkBFC,EAjBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASnB,gBAAT,gBACnB,YAAC,IAAD,CAAKoB,GAAI,GACP,YAAC,IAAD,CAAOP,GAAIC,OAAMC,GAAII,EAAKP,KAAMS,GAAI,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAO,SAC/DJ,EAAKK,OAER,iBAAGH,GAAI,CAAEE,MAAO,YAAaE,GAAI,EAAGC,EAAG,CAAEH,MAAO,aAAeD,SAAU,CAAC,EAAG,EAAG,KAC9E,wBAAOH,EAAKQ,MACXR,EAAKhB,MAAQH,GACZ,YAAC,IAAMO,SAAP,WAEE,YAAC,IAAD,CAAUJ,KAAMgB,EAAKhB,WCJhByB,IARC,SAAC,GAAD,IAAG7B,EAAH,EAAGA,MAAO8B,EAAV,EAAUA,UAAV,IAAqB7B,gBAArB,gBACd,uBAASqB,GAAI,CAAED,GAAI,CAAC,EAAG,EAAG,IAAMS,UAAWA,GACxC9B,EAAMS,KAAI,SAACW,GAAD,OACT,YAAC,EAAD,CAAcR,IAAKQ,EAAKP,KAAMO,KAAMA,EAAMnB,SAAUA","file":"component---src-pages-posts-js-b863e6c4b97f1feed1d2.js","sourcesContent":["import Layout from \"@lekoarts/gatsby-theme-minimal-blog/src/components/layout\"\nimport Listing from \"@lekoarts/gatsby-theme-minimal-blog/src/components/listing\"\nimport React from \"react\"\nimport {graphql} from \"gatsby\"\n\nexport default ({pageContext, data}) => {\n  return (\n    <Layout>\n      <h1>Posts | {pageContext.locale}</h1>\n      {data.allPost.nodes.length > 0 ? (\n        <Listing posts={data.allPost.nodes} showTags={false} />\n      ) : (\n        \"No posts in \" + pageContext.locale\n      )}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query Posts($localeRegex: String!) {\n    allPost(\n      sort: {fields: date, order: DESC}\n      filter: {slug: {regex: $localeRegex}}\n    ) {\n      nodes {\n        slug\n        title\n        date(formatString: \"MMMM Do, YYYY\")\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n"],"sourceRoot":""}